"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (on, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, { actual: on }, {
      actual: options,
      possible: {
        ignore: ["descendant", "compounded"]
      },
      optional: true
    });
    if (!validOptions) {
      return;
    }

    root.walkRules(function (rule) {

      if (!(0, _utils.isStandardRule)(rule)) {
        return;
      }
      if ((0, _utils.isKeyframeRule)(rule)) {
        return;
      }
      var selector = rule.selector;

      if (!(0, _utils.isStandardSelector)(selector)) {
        return;
      }

      (0, _postcssSelectorParser2.default)(checkSelector).process(selector);

      function checkSelector(selectorAST) {
        selectorAST.eachTag(function (tag) {

          if (!(0, _utils.isStandardTypeSelector)(tag)) {
            return;
          }

          if ((0, _utils.optionsHaveIgnored)(options, "descendant") && isCombinator(tag.prev())) {
            return;
          }

          if ((0, _utils.optionsHaveIgnored)(options, "compounded") && (0, _lodash.get)(tag, "parent.nodes.length") > 1 && !isCombinator(tag.prev()) && !isCombinator(tag.next())) {
            return;
          }

          (0, _utils.report)({
            message: messages.rejected,
            node: rule,
            index: tag.sourceIndex,
            ruleName: ruleName,
            result: result
          });
        });
      }
    });
  };
};

var _postcssSelectorParser = require("postcss-selector-parser");

var _postcssSelectorParser2 = _interopRequireDefault(_postcssSelectorParser);

var _lodash = require("lodash");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "selector-no-type";

var messages = exports.messages = (0, _utils.ruleMessages)(ruleName, {
  rejected: "Unexpected type selector"
});

function isCombinator(node) {
  return (0, _lodash.get)(node, "type") === "combinator";
}