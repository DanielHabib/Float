"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation, options) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["lower", "upper"]
    }, {
      actual: options,
      possible: {
        ignoreKeywords: [_lodash.isString]
      },
      optional: true
    });
    if (!validOptions) {
      return;
    }

    root.walkDecls(function (decl) {
      var value = decl.value;


      (0, _postcssValueParser2.default)(value).walk(function (node) {
        // Ignore keywords within `url` and `var` function
        if (node.type === "function" && (node.value === "url" || node.value === "var")) {
          return false;
        }

        var keyword = node.value;

        // Ignore css variables, and hex values, and math operators, and sass interpolation
        if (node.type !== "word" || !(0, _utils.isStandardValue)(node.value) || value.indexOf("#") !== -1 || ignoredCharacters.has(keyword)) {
          return;
        }

        var parsedUnit = _postcssValueParser2.default.unit(keyword);

        if (parsedUnit !== false) {
          return;
        }

        var ignoreKeywords = options && options.ignoreKeywords || [];

        if (ignoreKeywords.length > 0 && (0, _utils.matchesStringOrRegExp)(keyword, ignoreKeywords)) {
          return;
        }

        var keywordLowerCase = keyword.toLocaleLowerCase();
        var expectedKeyword = null;

        if (expectation === "lower" && ignoredCamelCaseKeywords.hasOwnProperty(keywordLowerCase)) {
          expectedKeyword = ignoredCamelCaseKeywords[keywordLowerCase];
        } else if (expectation === "lower") {
          expectedKeyword = keyword.toLowerCase();
        } else {
          expectedKeyword = keyword.toUpperCase();
        }

        if (keyword === expectedKeyword) {
          return;
        }

        (0, _utils.report)({
          message: messages.expected(keyword, expectedKeyword),
          node: decl,
          index: (0, _utils.declarationValueIndex)(decl) + node.sourceIndex,
          result: result,
          ruleName: ruleName
        });
      });
    });
  };
};

var _postcssValueParser = require("postcss-value-parser");

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

var _lodash = require("lodash");

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "value-keyword-case";

var messages = (0, _utils.ruleMessages)(ruleName, {
  expected: function expected(actual, _expected) {
    return "Expected \"" + actual + "\" to be \"" + _expected + "\"";
  }
});

// Operators are interpreted as "words" by the value parser, so we want to make sure to ignore them.
exports.messages = messages;
var ignoredCharacters = new Set(["+", "-", "/", "*", "%"]);

var ignoredCamelCaseKeywords = {
  "optimizespeed": "optimizeSpeed",
  "optimizelegibility": "optimizeLegibility",
  "geometricprecision": "geometricPrecision",
  "currentcolor": "currentColor"
};