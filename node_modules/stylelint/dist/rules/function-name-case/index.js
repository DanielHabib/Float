"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.messages = exports.ruleName = undefined;

exports.default = function (expectation) {
  return function (root, result) {
    var validOptions = (0, _utils.validateOptions)(result, ruleName, {
      actual: expectation,
      possible: ["lower", "upper"]
    });
    if (!validOptions) {
      return;
    }

    root.walkDecls(function (decl) {
      var value = decl.value;


      (0, _postcssValueParser2.default)(value).walk(function (node) {
        if (node.type !== "function") {
          return;
        }

        var functionName = node.value;
        var functionNameLowerCase = functionName.toLocaleLowerCase();

        var expectedFunctionName = null;

        if (expectation === "lower" && ignoredCamelCaseFunctionNames.hasOwnProperty(functionNameLowerCase)) {
          expectedFunctionName = ignoredCamelCaseFunctionNames[functionNameLowerCase];
        } else if (expectation === "lower") {
          expectedFunctionName = functionNameLowerCase;
        } else {
          expectedFunctionName = functionName.toUpperCase();
        }

        if (functionName === expectedFunctionName) {
          return;
        }

        (0, _utils.report)({
          message: messages.expected(functionName, expectedFunctionName),
          node: decl,
          index: (0, _utils.declarationValueIndex)(decl) + node.sourceIndex,
          result: result,
          ruleName: ruleName
        });
      });
    });
  };
};

var _postcssValueParser = require("postcss-value-parser");

var _postcssValueParser2 = _interopRequireDefault(_postcssValueParser);

var _utils = require("../../utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ruleName = exports.ruleName = "function-name-case";

var messages = (0, _utils.ruleMessages)(ruleName, {
  expected: function expected(actual, _expected) {
    return "Expected \"" + actual + "\" to be \"" + _expected + "\"";
  }
});

exports.messages = messages;
var ignoredCamelCaseFunctionNames = {
  "translatex": "translateX",
  "translatey": "translateY",
  "translatez": "translateZ",
  "scalex": "scaleX",
  "scaley": "scaleY",
  "scalez": "scaleZ",
  "rotatex": "rotateX",
  "rotatey": "rotateY",
  "rotatez": "rotateZ",
  "skewx": "skewX",
  "skewy": "skewY"
};