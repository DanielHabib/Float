"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (options) {
  var rawConfig = function () {
    if (options.config) return options.config;
    if (options.rules) return options;
    return false;
  }();
  var configBasedir = options.configBasedir || process.cwd();

  if (rawConfig) {
    return augmentConfig(rawConfig, configBasedir).then(function (config) {
      return {
        config: (0, _lodash.merge)(config, options.configOverrides),
        configDir: configBasedir
      };
    });
  }

  var cosmiconfigOptions = {
    // Turn off argv option to avoid hijacking the all-too-common
    // --config argument, when this is used in conjunction with other CLI's
    // (e.g. webpack)
    argv: false,
    // Allow extensions on rc filenames
    rcExtensions: true
  };

  if (options.configFile) {
    cosmiconfigOptions.configPath = _path2.default.resolve(process.cwd(), options.configFile);
  }

  var rootConfigDir = void 0;

  return (0, _cosmiconfig2.default)("stylelint", cosmiconfigOptions).then(function (result) {
    if (!result) throw (0, _utils.configurationError)("No configuration found");
    rootConfigDir = _path2.default.dirname(result.filepath);
    return augmentConfig(result.config, rootConfigDir);
  }).then(function (augmentedConfig) {
    var finalConfig = options.configOverrides ? (0, _lodash.merge)({}, augmentedConfig, options.configOverrides) : augmentedConfig;
    return {
      config: finalConfig,
      configDir: rootConfigDir
    };
  });
};

var _path = require("path");

var _path2 = _interopRequireDefault(_path);

var _fs = require("fs");

var _fs2 = _interopRequireDefault(_fs);

var _cosmiconfig = require("cosmiconfig");

var _cosmiconfig2 = _interopRequireDefault(_cosmiconfig);

var _resolveFrom = require("resolve-from");

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _lodash = require("lodash");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var IGNORE_FILENAME = ".stylelintignore";

function augmentConfig(config, configDir) {
  return setIgnoreFiles(config, configDir).then(function (augmentedConfig) {
    // Absolutize the plugins here, because here is the place
    // where we know the basedir for this particular config
    return absolutizePlugins(augmentedConfig, configDir);
  }).then(function (augmentedConfig) {
    if (!config.extends) {
      return Promise.resolve(augmentedConfig);
    }

    var extendLookups = [].concat(augmentedConfig.extends);
    var origConfig = (0, _lodash.omit)(augmentedConfig, "extends");
    var resultPromise = extendLookups.reduce(function (mergeConfigs, extendLookup) {
      return mergeConfigs.then(function (mergedConfig) {
        return loadExtendedConfig(mergedConfig, configDir, extendLookup).then(function (extendedConfig) {
          return (0, _lodash.merge)({}, mergedConfig, extendedConfig);
        });
      });
    }, Promise.resolve(origConfig));

    return resultPromise.then(function (mergedConfig) {
      return (0, _lodash.merge)({}, mergedConfig, origConfig);
    });
  });
}

function setIgnoreFiles(config, configDir) {
  return findIgnorePatterns(configDir).then(function (ignorePatterns) {
    config.ignoreFiles = [].concat(ignorePatterns, config.ignoreFiles || []);
    return config;
  });
}

function loadExtendedConfig(config, configDir, extendLookup) {
  var extendPath = getModulePath(configDir, extendLookup);
  var extendDir = _path2.default.dirname(extendPath);
  return (0, _cosmiconfig2.default)(null, {
    configPath: extendPath,
    // In case --config was used: do not pay attention to it again
    argv: false
  }).then(function (result) {
    return augmentConfig(stripIgnoreFiles(result.config), extendDir);
  });
}

// Replace all plugin lookups with absolute paths
function absolutizePlugins(config, configDir) {
  if (!config.plugins) {
    return config;
  }
  return (0, _lodash.assign)({}, config, {
    plugins: config.plugins.map(function (lookup) {
      return getModulePath(configDir, lookup);
    })
  });
}

function getModulePath(basedir, lookup) {
  var path = (0, _resolveFrom2.default)(basedir, lookup);
  if (path) return path;
  throw (0, _utils.configurationError)("Could not find \"" + lookup + "\". Do you need a `configBasedir`?");
}

function findIgnorePatterns(configDir) {
  return new Promise(function (resolve, reject) {
    var ignoreFilePath = _path2.default.resolve(configDir, IGNORE_FILENAME);

    _fs2.default.readFile(ignoreFilePath, "utf8", function (err, data) {
      if (err) {
        // If the file's not found, great, we'll just give in an empty array
        if (err.code === "ENOENT") return resolve([]);
        return reject(err);
      }
      var ignorePatterns = data.split(/\r?\n/g).filter(function (val) {
        return val.trim() !== "";
      }) // Remove empty lines
      .filter(function (val) {
        return val.trim()[0] !== "#";
      }); // Remove comments
      resolve(ignorePatterns);
    });
  });
}

// The `ignoreFiles` option only works with the
// config that is being directly invoked, not any
// extended configs
function stripIgnoreFiles(config) {
  return (0, _lodash.omit)(config, "ignoreFiles");
}