'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = tokenizeNestedMixin;

var _globals = require('./globals');

// it is not very reasonable to reduce complexity beyond this level
// eslint-disable-next-line complexity
function tokenizeNestedMixin(state) {
    var openedParenthesesCount = 0;
    var closedParenthesesCount = 0;
    var unclosedCurlyBlocks = 0;
    var endLine = state.line;
    var endOffset = state.offset;

    for (var i = state.pos + 1; i < state.length; i++) {
        state.symbolCode = state.css.charCodeAt(i);
        endOffset++;

        if (openedParenthesesCount === closedParenthesesCount && !unclosedCurlyBlocks && (state.symbolCode === _globals.semicolon || state.symbolCode === _globals.closedCurlyBracket)) {
            state.nextPos = i;

            // not including symbol '}'
            if (state.symbolCode === _globals.closedCurlyBracket) {
                state.nextPos--;
            }

            state.cssPart = state.css.slice(state.pos, state.nextPos + 1);

            var tokenName = openedParenthesesCount ? 'mixin-function' : 'mixin-inline';

            // we will replace the last token
            state.tokens.pop();
            state.tokens.push([tokenName, state.cssPart, state.line, state.pos - state.offset, endLine, state.nextPos - endOffset]);

            break;
        }

        switch (state.symbolCode) {
            case _globals.newline:
                {
                    endLine++;
                    endOffset = i;
                    break;
                }

            case _globals.openedCurlyBracket:
                {
                    // it's an inner block -> exit from the loop
                    if (!unclosedCurlyBlocks && openedParenthesesCount === closedParenthesesCount) {
                        i = state.length;
                    }

                    unclosedCurlyBlocks++;
                    break;
                }

            case _globals.closedCurlyBracket:
                {
                    unclosedCurlyBlocks--;
                    break;
                }

            case _globals.openedParenthesis:
                {
                    openedParenthesesCount++;
                    break;
                }

            case _globals.closedParenthesis:
                {
                    closedParenthesesCount++;
                    break;
                }

            default:
                break;
        }
    }
}
module.exports = exports['default'];